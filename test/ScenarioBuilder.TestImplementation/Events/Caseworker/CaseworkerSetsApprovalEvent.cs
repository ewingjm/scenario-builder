namespace ScenarioBuilder.TestImplementation.Events.Caseworker
{
    using Microsoft.Extensions.Logging;
    using Microsoft.Xrm.Sdk;
    using ScenarioBuilder.TestImplementation.Events.Caseworker.Composites;
    using ScenarioBuilder.TestImplementation.Events.PortalUser;
    using ScenarioBuilder.TestImplementation.Services;

    /// <summary>
    /// An event for a caseworker approving an application.
    /// </summary>
    /// <remarks>
    /// Initializes a new instance of the <see cref="CaseworkerSetsApprovalEvent"/> class.
    /// </remarks>
    /// <param name="serviceClientFactory">A service client factory.</param>
    /// <param name="logger">A logger.</param>
    /// <param name="eventId">The ID of the event.</param>
    public class CaseworkerSetsApprovalEvent(IServiceClientFactory serviceClientFactory, ILogger<CaseworkerSetsApprovalEvent> logger, string eventId)
        : Event(eventId)
    {
        private readonly IServiceClientFactory serviceClientFactory = serviceClientFactory;
        private readonly ILogger<CaseworkerSetsApprovalEvent> logger = logger;

        private bool? approved;

        /// <inheritdoc/>
        public override async Task ExecuteAsync(ScenarioContext context)
        {
            this.logger.LogInformation("Starting application approval.");

            if (!context.TryGet<PortalUserSubmitsApplicationEvent.Info>(out var applicationInfo, [ApplicationScenario.EventIds.ApplicationSubmission]))
            {
                throw new InvalidOperationException("No submitted applicatio info was found for the current scenario.");
            }

            if (!context.TryGet<CaseworkerAssignsApplicationEvent.Info>(out var assignmentInfo, [ApplicationScenario.EventIds.ApplicationProcessing, CaseworkerProcessesApplicationEvent.EventIds.ApplicationAssignment]))
            {
                throw new InvalidOperationException("No application assignment info was found for the current scenario.");
            }

            var application = new Entity("application", applicationInfo.SubmittedApplicationId);
            var approved = this.approved ?? true;
            application.Attributes.Add("approved", approved);
            this.logger.LogInformation("Updating application approval to {Approved}.", approved);

            await this.serviceClientFactory
                .GetServiceClient(assignmentInfo.AssignedCaseworkerId)
                .UpdateAsync(application);

            context.Set(this.EventId, new Info { Approved = approved });

            this.logger.LogInformation("Finished application approval.");
        }

        /// <summary>
        /// A builder for the <see cref="CaseworkerSetsApprovalEvent"/>.
        /// </summary>
        /// <remarks>
        /// Initializes a new instance of the <see cref="Builder"/> class.
        /// </remarks>
        /// <param name="eventFactory">The event factory.</param>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="constructorArgs">The constructor args.</param>
        public class Builder(EventFactory eventFactory, string eventId, object[] constructorArgs)
            : Builder<CaseworkerSetsApprovalEvent>(eventFactory, eventId, constructorArgs)
        {
            private bool? approved;

            /// <summary>
            /// Overrides the approval value.
            /// </summary>
            /// <param name="approved">Whether to approve the application.</param>
            /// <returns>The builder.</returns>
            public Builder WithApproval(bool approved)
            {
                this.approved = approved;

                return this;
            }
        }

        /// <summary>
        /// Info generated by the <see cref="CaseworkerSetsApprovalEvent"/>.
        /// </summary>
        public class Info
        {
            /// <summary>
            /// Gets a value indicating whether gets whether the application was approved.
            /// </summary>
            public bool Approved { get; internal set; }
        }
    }
}
