namespace ScenarioBuilder.TestImplementation.Events.Caseworker
{
    using Microsoft.Crm.Sdk.Messages;
    using Microsoft.Extensions.Logging;
    using Microsoft.PowerPlatform.Dataverse.Client;
    using Microsoft.Xrm.Sdk;
    using ScenarioBuilder.TestImplementation.Events.PortalUser;
    using ScenarioBuilder.TestImplementation.Services;

    /// <summary>
    /// An event for a caseworker assigning an application.
    /// </summary>
    /// <remarks>
    /// Initializes a new instance of the <see cref="CaseworkerAssignsApplicationEvent"/> class.
    /// </remarks>
    /// <param name="serviceClientFactory">A service client factory.</param>
    /// <param name="logger">A logger.</param>
    /// <param name="eventId">The ID of the event.</param>
    public class CaseworkerAssignsApplicationEvent(IServiceClientFactory serviceClientFactory, ILogger<CaseworkerSetsApprovalEvent> logger, string eventId)
        : Event(eventId)
    {
        private readonly IServiceClientFactory serviceClientFactory = serviceClientFactory;
        private readonly ILogger<CaseworkerSetsApprovalEvent> logger = logger;

        private Guid? assignee;

        /// <inheritdoc/>
        public override async Task ExecuteAsync(ScenarioContext context)
        {
            this.logger.LogInformation("Starting the application assignment.");

            if (!context.TryGet(out PortalUserSubmitsApplicationEvent.Info applicationInfo, [ApplicationScenario.EventIds.ApplicationSubmission]))
            {
                throw new InvalidOperationException("Unable to find a submitted application in the current scenario.");
            }

            IOrganizationServiceAsync2 client;
            Guid assigneeId;
            if (this.assignee.HasValue)
            {
                assigneeId = this.assignee.Value;
                client = this.serviceClientFactory.GetServiceClient(assigneeId);
                this.logger.LogInformation("Assigning to specified user {AssigneeId}.", assigneeId);
            }
            else
            {
                client = this.serviceClientFactory.GetServiceClient(Persona.Caseworker);
                assigneeId = ((WhoAmIResponse)await client.ExecuteAsync(new WhoAmIRequest())).UserId;
                this.logger.LogInformation("Assigning to random caseworker {AssigneeId}.", assigneeId);
            }

            var application = new Entity("application", applicationInfo.SubmittedApplicationId);
            application.Attributes.Add("ownerid", assigneeId);

            await client.UpdateAsync(application);

            context.Set(this.EventId, new Info { AssignedCaseworkerId = assigneeId });
            this.logger.LogInformation("Finished the application assignment.");
        }

        /// <summary>
        /// A builder for the <see cref="CaseworkerAssignsApplicationEvent"/> event.
        /// </summary>
        /// <remarks>
        /// Initializes a new instance of the <see cref="Builder"/> class.
        /// </remarks>
        /// <param name="eventFactory">The event factory.</param>
        /// <param name="constructorArgs">The constructor args.</param>
        /// <param name="eventId">The ID of the event.</param>
        public class Builder(EventFactory eventFactory, string eventId, object[] constructorArgs)
            : Builder<CaseworkerAssignsApplicationEvent>(eventFactory, eventId, constructorArgs)
        {
            private Guid? assignee;

            /// <summary>
            /// Overrides the assignee for the assignment.
            /// </summary>
            /// <param name="assignee">The ID of the assignee.</param>
            /// <returns>The builder.</returns>
            public Builder WithAssignee(Guid assignee)
            {
                this.assignee = assignee;

                return this;
            }
        }

        /// <summary>
        /// The info generated by the <see cref="CaseworkerAssignsApplicationEvent"/>.
        /// </summary>
        public class Info
        {
            /// <summary>
            /// Gets the assigned caseworker ID.
            /// </summary>
            public Guid AssignedCaseworkerId { get; internal set; }
        }
    }
}
